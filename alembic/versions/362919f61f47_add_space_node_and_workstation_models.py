"""Add space node and workstation models

Revision ID: 362919f61f47
Revises: 99e4b0bb221a
Create Date: 2025-04-26 08:56:42.644123

"""
from typing import Sequence, Union
from enum import Enum

from alembic import op
import sqlalchemy as sa
import pgvector.sqlalchemy


# revision identifiers, used by Alembic.
revision: str = '362919f61f47'
down_revision: Union[str, None] = '99e4b0bb221a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# Define the Enum class directly in the migration script
class WorkstationStatusEnum(Enum):
    AVAILABLE = "AVAILABLE"
    OCCUPIED = "OCCUPIED"
    MAINTENANCE = "MAINTENANCE"

# Create an SQLAlchemy Enum type using the defined Enum
# create_type=True is default and will handle CREATE TYPE ... IF NOT EXISTS
workstation_status_sa_enum = sa.Enum(
    WorkstationStatusEnum, 
    name="workstation_status_enum", 
    create_type=True # Explicitly True, though it's the default
)

def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE EXTENSION IF NOT EXISTS vector;")
    
    # The sa.Enum in the table definition below will handle creating the type.
    # workstation_status_sa_enum.create(op.get_bind(), checkfirst=True) # REMOVED THIS LINE
    
    op.create_table('promocodes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('discount_type', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('valid_until', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_promocodes_code'), 'promocodes', ['code'], unique=True)
    op.create_index(op.f('ix_promocodes_id'), 'promocodes', ['id'], unique=False)
    op.create_table('spacenodes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('location_description', sa.String(), nullable=True),
    sa.Column('corporate_admin_id', sa.Integer(), nullable=False),
    sa.Column('total_workstations', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['corporate_admin_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_spacenodes_id'), 'spacenodes', ['id'], unique=False)
    op.create_index(op.f('ix_spacenodes_name'), 'spacenodes', ['name'], unique=False)
    op.create_table('subscriptionplans',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('role_type', sa.String(), nullable=False),
    sa.Column('price_monthly', sa.Float(), nullable=True),
    sa.Column('price_annual', sa.Float(), nullable=True),
    sa.Column('features_list', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_subscriptionplans_id'), 'subscriptionplans', ['id'], unique=False)
    op.create_index(op.f('ix_subscriptionplans_name'), 'subscriptionplans', ['name'], unique=False)
    op.create_table('workstations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('space_id', sa.Integer(), nullable=False),
    sa.Column('status', workstation_status_sa_enum, nullable=False),
    sa.Column('assigned_user_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['assigned_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['space_id'], ['spacenodes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workstations_id'), 'workstations', ['id'], unique=False)
    op.create_index(op.f('ix_workstations_status'), 'workstations', ['status'], unique=False)
    op.add_column('users', sa.Column('title', sa.String(), nullable=True))
    op.add_column('users', sa.Column('bio', sa.String(), nullable=True))
    op.add_column('users', sa.Column('contact_info_visibility', sa.String(), nullable=True))
    op.add_column('users', sa.Column('skills_expertise', sa.ARRAY(sa.String()), nullable=True))
    op.add_column('users', sa.Column('industry_focus', sa.ARRAY(sa.String()), nullable=True))
    op.add_column('users', sa.Column('project_interests_goals', sa.String(), nullable=True))
    op.add_column('users', sa.Column('collaboration_preferences', sa.ARRAY(sa.String()), nullable=True))
    op.add_column('users', sa.Column('tools_technologies', sa.ARRAY(sa.String()), nullable=True))
    op.add_column('users', sa.Column('linkedin_profile_url', sa.String(), nullable=True))
    op.add_column('users', sa.Column('profile_picture_url', sa.String(), nullable=True))
    op.add_column('users', sa.Column('profile_vector', pgvector.sqlalchemy.Vector(dim=768), nullable=True))
    op.add_column('users', sa.Column('space_id', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('applied_promo_code_id', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('referral_code', sa.String(), nullable=True))
    op.add_column('users', sa.Column('community_badge', sa.String(), nullable=True))
    op.add_column('users', sa.Column('stripe_customer_id', sa.String(), nullable=True))
    op.add_column('users', sa.Column('stripe_subscription_id', sa.String(), nullable=True))
    op.add_column('users', sa.Column('subscription_status', sa.String(), nullable=True))
    op.add_column('users', sa.Column('subscription_plan_id', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('subscription_start_date', sa.DateTime(timezone=True), nullable=True))
    op.add_column('users', sa.Column('referral_credit_months', sa.Integer(), nullable=True))
    op.create_index(op.f('ix_users_referral_code'), 'users', ['referral_code'], unique=True)
    op.create_index(op.f('ix_users_stripe_customer_id'), 'users', ['stripe_customer_id'], unique=True)
    op.create_index(op.f('ix_users_stripe_subscription_id'), 'users', ['stripe_subscription_id'], unique=True)
    op.create_foreign_key(None, 'users', 'subscriptionplans', ['subscription_plan_id'], ['id'])
    op.create_foreign_key(None, 'users', 'spacenodes', ['space_id'], ['id'])
    op.create_foreign_key(None, 'users', 'promocodes', ['applied_promo_code_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_index(op.f('ix_users_stripe_subscription_id'), table_name='users')
    op.drop_index(op.f('ix_users_stripe_customer_id'), table_name='users')
    op.drop_index(op.f('ix_users_referral_code'), table_name='users')
    op.drop_column('users', 'referral_credit_months')
    op.drop_column('users', 'subscription_start_date')
    op.drop_column('users', 'subscription_plan_id')
    op.drop_column('users', 'subscription_status')
    op.drop_column('users', 'stripe_subscription_id')
    op.drop_column('users', 'stripe_customer_id')
    op.drop_column('users', 'community_badge')
    op.drop_column('users', 'referral_code')
    op.drop_column('users', 'applied_promo_code_id')
    op.drop_column('users', 'space_id')
    op.drop_column('users', 'profile_vector')
    op.drop_column('users', 'profile_picture_url')
    op.drop_column('users', 'linkedin_profile_url')
    op.drop_column('users', 'tools_technologies')
    op.drop_column('users', 'collaboration_preferences')
    op.drop_column('users', 'project_interests_goals')
    op.drop_column('users', 'industry_focus')
    op.drop_column('users', 'skills_expertise')
    op.drop_column('users', 'contact_info_visibility')
    op.drop_column('users', 'bio')
    op.drop_column('users', 'title')
    op.drop_index(op.f('ix_workstations_status'), table_name='workstations')
    op.drop_index(op.f('ix_workstations_id'), table_name='workstations')
    op.drop_table('workstations')
    op.drop_index(op.f('ix_subscriptionplans_name'), table_name='subscriptionplans')
    op.drop_index(op.f('ix_subscriptionplans_id'), table_name='subscriptionplans')
    op.drop_table('subscriptionplans')
    op.drop_index(op.f('ix_spacenodes_name'), table_name='spacenodes')
    op.drop_index(op.f('ix_spacenodes_id'), table_name='spacenodes')
    op.drop_table('spacenodes')
    op.drop_index(op.f('ix_promocodes_id'), table_name='promocodes')
    op.drop_index(op.f('ix_promocodes_code'), table_name='promocodes')
    op.drop_table('promocodes')
    # The sa.Enum type should be dropped automatically when the last table using it is dropped,
    # or if create_type=False was used and it was managed entirely manually.
    # For safety with create_type=True, explicit drop in downgrade is okay if table drop doesn't manage it.
    # However, let's rely on SQLAlchemy's behavior first. If issues, can add: op.execute("DROP TYPE IF EXISTS workstation_status_enum;")
    # workstation_status_sa_enum.drop(op.get_bind(), checkfirst=True) # REMOVED THIS LINE
    # ### end Alembic commands ###
