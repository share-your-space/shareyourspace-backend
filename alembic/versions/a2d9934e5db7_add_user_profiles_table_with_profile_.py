"""Add user_profiles table with profile_vector column

Revision ID: a2d9934e5db7
Revises: 6584e07b26cc
Create Date: 2025-04-26 17:15:19.976232

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector.sqlalchemy

# revision identifiers, used by Alembic.
revision: str = 'a2d9934e5db7'
down_revision: Union[str, None] = '6584e07b26cc'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_profiles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('profile_vector', pgvector.sqlalchemy.Vector(dim=768), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_profiles_id'), 'user_profiles', ['id'], unique=False)
    op.create_index(op.f('ix_user_profiles_user_id'), 'user_profiles', ['user_id'], unique=True)

    # Drop constraints referencing the tables BEFORE dropping the tables
    op.drop_constraint('users_applied_promo_code_id_fkey', 'users', type_='foreignkey')
    op.drop_constraint('users_subscription_plan_id_fkey', 'users', type_='foreignkey')

    # Now drop the tables
    op.drop_index('ix_promocodes_code', table_name='promocodes')
    op.drop_index('ix_promocodes_id', table_name='promocodes')
    op.drop_table('promocodes')
    op.drop_index('ix_subscriptionplans_id', table_name='subscriptionplans')
    op.drop_index('ix_subscriptionplans_name', table_name='subscriptionplans')
    op.drop_table('subscriptionplans')

    # Other adjustments detected by autogenerate
    op.alter_column('spacenodes', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('spacenodes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index('ix_users_referral_code', table_name='users')
    op.drop_index('ix_users_stripe_customer_id', table_name='users')
    op.drop_index('ix_users_stripe_subscription_id', table_name='users')
    op.create_index(op.f('ix_users_space_id'), 'users', ['space_id'], unique=False)
    op.drop_column('users', 'tools_technologies')
    op.drop_column('users', 'profile_vector')
    op.drop_column('users', 'stripe_customer_id')
    op.drop_column('users', 'skills_expertise')
    op.drop_column('users', 'linkedin_profile_url')
    op.drop_column('users', 'project_interests_goals')
    op.drop_column('users', 'stripe_subscription_id')
    op.drop_column('users', 'subscription_start_date')
    op.drop_column('users', 'title')
    op.drop_column('users', 'community_badge')
    op.drop_column('users', 'collaboration_preferences')
    op.drop_column('users', 'bio')
    op.drop_column('users', 'profile_picture_url')
    op.drop_column('users', 'subscription_status')
    op.drop_column('users', 'applied_promo_code_id')
    op.drop_column('users', 'contact_info_visibility')
    op.drop_column('users', 'industry_focus')
    op.drop_column('users', 'subscription_plan_id')
    op.drop_column('users', 'referral_code')
    op.drop_column('users', 'referral_credit_months')
    op.alter_column('workstations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('workstations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('workstations', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('workstations', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.add_column('users', sa.Column('referral_credit_months', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('referral_code', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('subscription_plan_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('industry_focus', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('contact_info_visibility', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('applied_promo_code_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('subscription_status', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('profile_picture_url', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('bio', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('collaboration_preferences', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('community_badge', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('subscription_start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('stripe_subscription_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('project_interests_goals', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('linkedin_profile_url', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('skills_expertise', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('stripe_customer_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('profile_vector', pgvector.sqlalchemy.Vector(dim=768), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('tools_technologies', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True))
    op.create_foreign_key('users_applied_promo_code_id_fkey', 'users', 'promocodes', ['applied_promo_code_id'], ['id'])
    op.create_foreign_key('users_subscription_plan_id_fkey', 'users', 'subscriptionplans', ['subscription_plan_id'], ['id'])
    op.drop_index(op.f('ix_users_space_id'), table_name='users')
    op.create_index('ix_users_stripe_subscription_id', 'users', ['stripe_subscription_id'], unique=True)
    op.create_index('ix_users_stripe_customer_id', 'users', ['stripe_customer_id'], unique=True)
    op.create_index('ix_users_referral_code', 'users', ['referral_code'], unique=True)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('spacenodes', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('spacenodes', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_table('subscriptionplans',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('role_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('price_monthly', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('price_annual', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('features_list', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='subscriptionplans_pkey')
    )
    op.create_index('ix_subscriptionplans_name', 'subscriptionplans', ['name'], unique=False)
    op.create_index('ix_subscriptionplans_id', 'subscriptionplans', ['id'], unique=False)
    op.create_table('promocodes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('discount_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('valid_until', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='promocodes_pkey')
    )
    op.create_index('ix_promocodes_id', 'promocodes', ['id'], unique=False)
    op.create_index('ix_promocodes_code', 'promocodes', ['code'], unique=True)
    op.drop_index(op.f('ix_user_profiles_user_id'), table_name='user_profiles')
    op.drop_index(op.f('ix_user_profiles_id'), table_name='user_profiles')
    op.drop_table('user_profiles')
    # ### end Alembic commands ###
