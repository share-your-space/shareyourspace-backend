"""add_space_workstation_management_models_and_relations

Revision ID: c421022fb1a2
Revises: 4560944864bf
Create Date: 2025-05-20 07:48:53.925033

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from app.schemas.space import WorkstationStatus # For Enum values

# revision identifiers, used by Alembic.
revision: str = 'c421022fb1a2'
down_revision: Union[str, None] = '4560944864bf'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# Define the Enum type for use in this migration
workstation_status_enum_type = sa.Enum(WorkstationStatus, name='workstation_status_enum')

def upgrade() -> None:
    """Upgrade schema."""
    # Create the ENUM type in PostgreSQL
    workstation_status_enum_type.create(op.get_bind(), checkfirst=True)

    # ### commands auto generated by Alembic - please adjust! ###
    # Modifications to 'spacenodes' table
    op.alter_column('spacenodes', 'location_description', new_column_name='address', existing_type=sa.VARCHAR(), nullable=True)
    op.add_column('spacenodes', sa.Column('company_id', sa.Integer(), nullable=True))
    op.create_foreign_key(op.f('fk_spacenodes_company_id_companies'), 'spacenodes', 'companies', ['company_id'], ['id'])
    
    # Attempt to drop total_workstations. If it was already dropped or renamed, this might cause an error.
    # It's safer to check if it exists or handle potential errors if this script is re-runnable.
    # For now, assume it exists based on previous model state.
    try:
        op.drop_column('spacenodes', 'total_workstations')
    except Exception as e:
        print(f"Could not drop total_workstations from spacenodes (may have been already dropped): {e}")


    # Modifications to 'workstations' table
    op.add_column('workstations', sa.Column('name', sa.String(), nullable=False, server_default='Workstation'))
    op.create_index(op.f('ix_workstations_name'), 'workstations', ['name'], unique=False)
    
    # Drop foreign key constraint associated with assigned_user_id if it exists
    # Alembic autogenerates FK names like: fk_workstations_assigned_user_id_users
    # We need to know the exact name or allow op.drop_column to handle it if the DB does.
    # Dropping the column often drops the FK if the DB supports it.
    # If a specific FK name needs to be dropped first:
    # op.drop_constraint('fk_workstations_assigned_user_id_users', 'workstations', type_='foreignkey')
    op.drop_column('workstations', 'assigned_user_id')
    
    op.drop_column('workstations', 'status') # Drop old string status
    op.add_column('workstations', sa.Column('status', workstation_status_enum_type, nullable=False, server_default=WorkstationStatus.AVAILABLE.value))
    op.create_index(op.f('ix_workstations_status'), 'workstations', ['status'], unique=False) # Recreate index for new status


    # Create 'workstation_assignments' table
    op.create_table('workstation_assignments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('workstation_id', sa.Integer(), nullable=False),
    sa.Column('space_id', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False, server_default=sa.func.now()),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.func.now(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.func.now(), onupdate=sa.func.now(), nullable=False),
    sa.ForeignKeyConstraint(['space_id'], ['spacenodes.id'], name=op.f('fk_workstation_assignments_space_id_spacenodes')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_workstation_assignments_user_id_users')),
    sa.ForeignKeyConstraint(['workstation_id'], ['workstations.id'], name=op.f('fk_workstation_assignments_workstation_id_workstations')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_workstation_assignments'))
    )
    op.create_index(op.f('ix_workstation_assignments_id'), 'workstation_assignments', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_workstation_assignments_id'), table_name='workstation_assignments')
    op.drop_table('workstation_assignments')

    # Revert 'workstations' table changes
    op.drop_index(op.f('ix_workstations_status'), table_name='workstations')
    op.drop_column('workstations', 'status') # Drop new enum status
    op.add_column('workstations', sa.Column('status', sa.String(), nullable=False, server_default='Available')) # Add back old string status
    # op.create_index if old status was indexed, which it was.
    op.create_index('ix_workstations_status', 'workstations', ['status'], unique=False)


    op.add_column('workstations', sa.Column('assigned_user_id', sa.Integer(), autoincrement=False, nullable=True))
    op.create_foreign_key('fk_workstations_assigned_user_id_users', 'workstations', 'users', ['assigned_user_id'], ['id'])
    
    op.drop_index(op.f('ix_workstations_name'), table_name='workstations')
    op.drop_column('workstations', 'name')

    # Revert 'spacenodes' table changes
    try:
        op.add_column('spacenodes', sa.Column('total_workstations', sa.INTEGER(), autoincrement=False, nullable=False, server_default="0"))
    except Exception as e:
         print(f"Could not add total_workstations to spacenodes (may not have been dropped cleanly or other issue): {e}")

    op.drop_constraint(op.f('fk_spacenodes_company_id_companies'), 'spacenodes', type_='foreignkey')
    op.drop_column('spacenodes', 'company_id')
    op.alter_column('spacenodes', 'address', new_column_name='location_description', existing_type=sa.VARCHAR(), nullable=True)

    # Drop the ENUM type
    workstation_status_enum_type.drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
